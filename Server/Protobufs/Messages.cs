// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from messages.proto</summary>
public static partial class MessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for messages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5tZXNzYWdlcy5wcm90byINCgtTY2FuQ29tbWFuZCIPCg1Bc3NpZ25Db21t",
          "YW5kIhYKFFJlcXVlc3RTdGF0dXNDb21tYW5kIhEKD0lkZW50aWZ5Q29tbWFu",
          "ZCIVChNTZXRDb3VudFJhdGVDb21tYW5kIswBCgdDb21tYW5kEhwKBHNjYW4Y",
          "ASABKAsyDC5TY2FuQ29tbWFuZEgAEiAKBmFzc2lnbhgCIAEoCzIOLkFzc2ln",
          "bkNvbW1hbmRIABIoCgdyZXF1ZXN0GAMgASgLMhUuUmVxdWVzdFN0YXR1c0Nv",
          "bW1hbmRIABIkCghpZGVudGlmeRgEIAEoCzIQLklkZW50aWZ5Q29tbWFuZEgA",
          "EikKCWNvdW50UmF0ZRgFIAEoCzIULlNldENvdW50UmF0ZUNvbW1hbmRIAEIG",
          "CgR0eXBlIg4KDFN5c3RlbVN0YXR1cyITChFTZW5zb3JDb3VudFN0YXR1cyIT",
          "ChFTeXN0ZW1GYXVsdFN0YXR1cyISChBTeXN0ZW1Cb290U3RhdHVzIhEKD1Rv",
          "bWJTdG9uZVN0YXR1cyLAAQoGU3RhdHVzEh8KBnN5c3RlbRgBIAEoCzINLlN5",
          "c3RlbVN0YXR1c0gAEiMKBWNvdW50GAIgASgLMhIuU2Vuc29yQ291bnRTdGF0",
          "dXNIABIjCgVmYXVsdBgDIAEoCzISLlN5c3RlbUZhdWx0U3RhdHVzSAASIQoE",
          "Ym9vdBgEIAEoCzIRLlN5c3RlbUJvb3RTdGF0dXNIABIgCgR0b21iGAUgASgL",
          "MhAuVG9tYlN0b25lU3RhdHVzSABCBgoEdHlwZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ScanCommand), global::ScanCommand.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AssignCommand), global::AssignCommand.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestStatusCommand), global::RequestStatusCommand.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IdentifyCommand), global::IdentifyCommand.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetCountRateCommand), global::SetCountRateCommand.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Command), global::Command.Parser, new[]{ "Scan", "Assign", "Request", "Identify", "CountRate" }, new[]{ "Type" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemStatus), global::SystemStatus.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SensorCountStatus), global::SensorCountStatus.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemFaultStatus), global::SystemFaultStatus.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemBootStatus), global::SystemBootStatus.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TombStoneStatus), global::TombStoneStatus.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Status), global::Status.Parser, new[]{ "System", "Count", "Fault", "Boot", "Tomb" }, new[]{ "Type" }, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ScanCommand : pb::IMessage<ScanCommand> {
  private static readonly pb::MessageParser<ScanCommand> _parser = new pb::MessageParser<ScanCommand>(() => new ScanCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ScanCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanCommand(ScanCommand other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScanCommand Clone() {
    return new ScanCommand(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ScanCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ScanCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ScanCommand other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class AssignCommand : pb::IMessage<AssignCommand> {
  private static readonly pb::MessageParser<AssignCommand> _parser = new pb::MessageParser<AssignCommand>(() => new AssignCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AssignCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AssignCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AssignCommand(AssignCommand other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AssignCommand Clone() {
    return new AssignCommand(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AssignCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AssignCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AssignCommand other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class RequestStatusCommand : pb::IMessage<RequestStatusCommand> {
  private static readonly pb::MessageParser<RequestStatusCommand> _parser = new pb::MessageParser<RequestStatusCommand>(() => new RequestStatusCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RequestStatusCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestStatusCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestStatusCommand(RequestStatusCommand other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestStatusCommand Clone() {
    return new RequestStatusCommand(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RequestStatusCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RequestStatusCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RequestStatusCommand other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class IdentifyCommand : pb::IMessage<IdentifyCommand> {
  private static readonly pb::MessageParser<IdentifyCommand> _parser = new pb::MessageParser<IdentifyCommand>(() => new IdentifyCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IdentifyCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCommand(IdentifyCommand other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCommand Clone() {
    return new IdentifyCommand(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IdentifyCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IdentifyCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IdentifyCommand other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SetCountRateCommand : pb::IMessage<SetCountRateCommand> {
  private static readonly pb::MessageParser<SetCountRateCommand> _parser = new pb::MessageParser<SetCountRateCommand>(() => new SetCountRateCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetCountRateCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetCountRateCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetCountRateCommand(SetCountRateCommand other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetCountRateCommand Clone() {
    return new SetCountRateCommand(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetCountRateCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetCountRateCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetCountRateCommand other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Command : pb::IMessage<Command> {
  private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Command> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command(Command other) : this() {
    switch (other.TypeCase) {
      case TypeOneofCase.Scan:
        Scan = other.Scan.Clone();
        break;
      case TypeOneofCase.Assign:
        Assign = other.Assign.Clone();
        break;
      case TypeOneofCase.Request:
        Request = other.Request.Clone();
        break;
      case TypeOneofCase.Identify:
        Identify = other.Identify.Clone();
        break;
      case TypeOneofCase.CountRate:
        CountRate = other.CountRate.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command Clone() {
    return new Command(this);
  }

  /// <summary>Field number for the "scan" field.</summary>
  public const int ScanFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ScanCommand Scan {
    get { return typeCase_ == TypeOneofCase.Scan ? (global::ScanCommand) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Scan;
    }
  }

  /// <summary>Field number for the "assign" field.</summary>
  public const int AssignFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AssignCommand Assign {
    get { return typeCase_ == TypeOneofCase.Assign ? (global::AssignCommand) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Assign;
    }
  }

  /// <summary>Field number for the "request" field.</summary>
  public const int RequestFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RequestStatusCommand Request {
    get { return typeCase_ == TypeOneofCase.Request ? (global::RequestStatusCommand) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Request;
    }
  }

  /// <summary>Field number for the "identify" field.</summary>
  public const int IdentifyFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IdentifyCommand Identify {
    get { return typeCase_ == TypeOneofCase.Identify ? (global::IdentifyCommand) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Identify;
    }
  }

  /// <summary>Field number for the "countRate" field.</summary>
  public const int CountRateFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SetCountRateCommand CountRate {
    get { return typeCase_ == TypeOneofCase.CountRate ? (global::SetCountRateCommand) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CountRate;
    }
  }

  private object type_;
  /// <summary>Enum of possible cases for the "type" oneof.</summary>
  public enum TypeOneofCase {
    None = 0,
    Scan = 1,
    Assign = 2,
    Request = 3,
    Identify = 4,
    CountRate = 5,
  }
  private TypeOneofCase typeCase_ = TypeOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TypeOneofCase TypeCase {
    get { return typeCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    typeCase_ = TypeOneofCase.None;
    type_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Command);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Command other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Scan, other.Scan)) return false;
    if (!object.Equals(Assign, other.Assign)) return false;
    if (!object.Equals(Request, other.Request)) return false;
    if (!object.Equals(Identify, other.Identify)) return false;
    if (!object.Equals(CountRate, other.CountRate)) return false;
    if (TypeCase != other.TypeCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (typeCase_ == TypeOneofCase.Scan) hash ^= Scan.GetHashCode();
    if (typeCase_ == TypeOneofCase.Assign) hash ^= Assign.GetHashCode();
    if (typeCase_ == TypeOneofCase.Request) hash ^= Request.GetHashCode();
    if (typeCase_ == TypeOneofCase.Identify) hash ^= Identify.GetHashCode();
    if (typeCase_ == TypeOneofCase.CountRate) hash ^= CountRate.GetHashCode();
    hash ^= (int) typeCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (typeCase_ == TypeOneofCase.Scan) {
      output.WriteRawTag(10);
      output.WriteMessage(Scan);
    }
    if (typeCase_ == TypeOneofCase.Assign) {
      output.WriteRawTag(18);
      output.WriteMessage(Assign);
    }
    if (typeCase_ == TypeOneofCase.Request) {
      output.WriteRawTag(26);
      output.WriteMessage(Request);
    }
    if (typeCase_ == TypeOneofCase.Identify) {
      output.WriteRawTag(34);
      output.WriteMessage(Identify);
    }
    if (typeCase_ == TypeOneofCase.CountRate) {
      output.WriteRawTag(42);
      output.WriteMessage(CountRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (typeCase_ == TypeOneofCase.Scan) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scan);
    }
    if (typeCase_ == TypeOneofCase.Assign) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assign);
    }
    if (typeCase_ == TypeOneofCase.Request) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
    }
    if (typeCase_ == TypeOneofCase.Identify) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identify);
    }
    if (typeCase_ == TypeOneofCase.CountRate) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CountRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Command other) {
    if (other == null) {
      return;
    }
    switch (other.TypeCase) {
      case TypeOneofCase.Scan:
        if (Scan == null) {
          Scan = new global::ScanCommand();
        }
        Scan.MergeFrom(other.Scan);
        break;
      case TypeOneofCase.Assign:
        if (Assign == null) {
          Assign = new global::AssignCommand();
        }
        Assign.MergeFrom(other.Assign);
        break;
      case TypeOneofCase.Request:
        if (Request == null) {
          Request = new global::RequestStatusCommand();
        }
        Request.MergeFrom(other.Request);
        break;
      case TypeOneofCase.Identify:
        if (Identify == null) {
          Identify = new global::IdentifyCommand();
        }
        Identify.MergeFrom(other.Identify);
        break;
      case TypeOneofCase.CountRate:
        if (CountRate == null) {
          CountRate = new global::SetCountRateCommand();
        }
        CountRate.MergeFrom(other.CountRate);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::ScanCommand subBuilder = new global::ScanCommand();
          if (typeCase_ == TypeOneofCase.Scan) {
            subBuilder.MergeFrom(Scan);
          }
          input.ReadMessage(subBuilder);
          Scan = subBuilder;
          break;
        }
        case 18: {
          global::AssignCommand subBuilder = new global::AssignCommand();
          if (typeCase_ == TypeOneofCase.Assign) {
            subBuilder.MergeFrom(Assign);
          }
          input.ReadMessage(subBuilder);
          Assign = subBuilder;
          break;
        }
        case 26: {
          global::RequestStatusCommand subBuilder = new global::RequestStatusCommand();
          if (typeCase_ == TypeOneofCase.Request) {
            subBuilder.MergeFrom(Request);
          }
          input.ReadMessage(subBuilder);
          Request = subBuilder;
          break;
        }
        case 34: {
          global::IdentifyCommand subBuilder = new global::IdentifyCommand();
          if (typeCase_ == TypeOneofCase.Identify) {
            subBuilder.MergeFrom(Identify);
          }
          input.ReadMessage(subBuilder);
          Identify = subBuilder;
          break;
        }
        case 42: {
          global::SetCountRateCommand subBuilder = new global::SetCountRateCommand();
          if (typeCase_ == TypeOneofCase.CountRate) {
            subBuilder.MergeFrom(CountRate);
          }
          input.ReadMessage(subBuilder);
          CountRate = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class SystemStatus : pb::IMessage<SystemStatus> {
  private static readonly pb::MessageParser<SystemStatus> _parser = new pb::MessageParser<SystemStatus>(() => new SystemStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemStatus(SystemStatus other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemStatus Clone() {
    return new SystemStatus(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemStatus other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SensorCountStatus : pb::IMessage<SensorCountStatus> {
  private static readonly pb::MessageParser<SensorCountStatus> _parser = new pb::MessageParser<SensorCountStatus>(() => new SensorCountStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SensorCountStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCountStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCountStatus(SensorCountStatus other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCountStatus Clone() {
    return new SensorCountStatus(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SensorCountStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SensorCountStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SensorCountStatus other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SystemFaultStatus : pb::IMessage<SystemFaultStatus> {
  private static readonly pb::MessageParser<SystemFaultStatus> _parser = new pb::MessageParser<SystemFaultStatus>(() => new SystemFaultStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemFaultStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemFaultStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemFaultStatus(SystemFaultStatus other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemFaultStatus Clone() {
    return new SystemFaultStatus(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemFaultStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemFaultStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemFaultStatus other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SystemBootStatus : pb::IMessage<SystemBootStatus> {
  private static readonly pb::MessageParser<SystemBootStatus> _parser = new pb::MessageParser<SystemBootStatus>(() => new SystemBootStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemBootStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemBootStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemBootStatus(SystemBootStatus other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemBootStatus Clone() {
    return new SystemBootStatus(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemBootStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemBootStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemBootStatus other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// Set in mqtt for event of unintended disconenct
/// </summary>
public sealed partial class TombStoneStatus : pb::IMessage<TombStoneStatus> {
  private static readonly pb::MessageParser<TombStoneStatus> _parser = new pb::MessageParser<TombStoneStatus>(() => new TombStoneStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TombStoneStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TombStoneStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TombStoneStatus(TombStoneStatus other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TombStoneStatus Clone() {
    return new TombStoneStatus(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TombStoneStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TombStoneStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TombStoneStatus other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Status : pb::IMessage<Status> {
  private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Status> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessagesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Status() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Status(Status other) : this() {
    switch (other.TypeCase) {
      case TypeOneofCase.System:
        System = other.System.Clone();
        break;
      case TypeOneofCase.Count:
        Count = other.Count.Clone();
        break;
      case TypeOneofCase.Fault:
        Fault = other.Fault.Clone();
        break;
      case TypeOneofCase.Boot:
        Boot = other.Boot.Clone();
        break;
      case TypeOneofCase.Tomb:
        Tomb = other.Tomb.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Status Clone() {
    return new Status(this);
  }

  /// <summary>Field number for the "system" field.</summary>
  public const int SystemFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemStatus System {
    get { return typeCase_ == TypeOneofCase.System ? (global::SystemStatus) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.System;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SensorCountStatus Count {
    get { return typeCase_ == TypeOneofCase.Count ? (global::SensorCountStatus) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Count;
    }
  }

  /// <summary>Field number for the "fault" field.</summary>
  public const int FaultFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemFaultStatus Fault {
    get { return typeCase_ == TypeOneofCase.Fault ? (global::SystemFaultStatus) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Fault;
    }
  }

  /// <summary>Field number for the "boot" field.</summary>
  public const int BootFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemBootStatus Boot {
    get { return typeCase_ == TypeOneofCase.Boot ? (global::SystemBootStatus) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Boot;
    }
  }

  /// <summary>Field number for the "tomb" field.</summary>
  public const int TombFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TombStoneStatus Tomb {
    get { return typeCase_ == TypeOneofCase.Tomb ? (global::TombStoneStatus) type_ : null; }
    set {
      type_ = value;
      typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Tomb;
    }
  }

  private object type_;
  /// <summary>Enum of possible cases for the "type" oneof.</summary>
  public enum TypeOneofCase {
    None = 0,
    System = 1,
    Count = 2,
    Fault = 3,
    Boot = 4,
    Tomb = 5,
  }
  private TypeOneofCase typeCase_ = TypeOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TypeOneofCase TypeCase {
    get { return typeCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    typeCase_ = TypeOneofCase.None;
    type_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Status);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Status other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(System, other.System)) return false;
    if (!object.Equals(Count, other.Count)) return false;
    if (!object.Equals(Fault, other.Fault)) return false;
    if (!object.Equals(Boot, other.Boot)) return false;
    if (!object.Equals(Tomb, other.Tomb)) return false;
    if (TypeCase != other.TypeCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (typeCase_ == TypeOneofCase.System) hash ^= System.GetHashCode();
    if (typeCase_ == TypeOneofCase.Count) hash ^= Count.GetHashCode();
    if (typeCase_ == TypeOneofCase.Fault) hash ^= Fault.GetHashCode();
    if (typeCase_ == TypeOneofCase.Boot) hash ^= Boot.GetHashCode();
    if (typeCase_ == TypeOneofCase.Tomb) hash ^= Tomb.GetHashCode();
    hash ^= (int) typeCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (typeCase_ == TypeOneofCase.System) {
      output.WriteRawTag(10);
      output.WriteMessage(System);
    }
    if (typeCase_ == TypeOneofCase.Count) {
      output.WriteRawTag(18);
      output.WriteMessage(Count);
    }
    if (typeCase_ == TypeOneofCase.Fault) {
      output.WriteRawTag(26);
      output.WriteMessage(Fault);
    }
    if (typeCase_ == TypeOneofCase.Boot) {
      output.WriteRawTag(34);
      output.WriteMessage(Boot);
    }
    if (typeCase_ == TypeOneofCase.Tomb) {
      output.WriteRawTag(42);
      output.WriteMessage(Tomb);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (typeCase_ == TypeOneofCase.System) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(System);
    }
    if (typeCase_ == TypeOneofCase.Count) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
    }
    if (typeCase_ == TypeOneofCase.Fault) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fault);
    }
    if (typeCase_ == TypeOneofCase.Boot) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boot);
    }
    if (typeCase_ == TypeOneofCase.Tomb) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tomb);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Status other) {
    if (other == null) {
      return;
    }
    switch (other.TypeCase) {
      case TypeOneofCase.System:
        if (System == null) {
          System = new global::SystemStatus();
        }
        System.MergeFrom(other.System);
        break;
      case TypeOneofCase.Count:
        if (Count == null) {
          Count = new global::SensorCountStatus();
        }
        Count.MergeFrom(other.Count);
        break;
      case TypeOneofCase.Fault:
        if (Fault == null) {
          Fault = new global::SystemFaultStatus();
        }
        Fault.MergeFrom(other.Fault);
        break;
      case TypeOneofCase.Boot:
        if (Boot == null) {
          Boot = new global::SystemBootStatus();
        }
        Boot.MergeFrom(other.Boot);
        break;
      case TypeOneofCase.Tomb:
        if (Tomb == null) {
          Tomb = new global::TombStoneStatus();
        }
        Tomb.MergeFrom(other.Tomb);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::SystemStatus subBuilder = new global::SystemStatus();
          if (typeCase_ == TypeOneofCase.System) {
            subBuilder.MergeFrom(System);
          }
          input.ReadMessage(subBuilder);
          System = subBuilder;
          break;
        }
        case 18: {
          global::SensorCountStatus subBuilder = new global::SensorCountStatus();
          if (typeCase_ == TypeOneofCase.Count) {
            subBuilder.MergeFrom(Count);
          }
          input.ReadMessage(subBuilder);
          Count = subBuilder;
          break;
        }
        case 26: {
          global::SystemFaultStatus subBuilder = new global::SystemFaultStatus();
          if (typeCase_ == TypeOneofCase.Fault) {
            subBuilder.MergeFrom(Fault);
          }
          input.ReadMessage(subBuilder);
          Fault = subBuilder;
          break;
        }
        case 34: {
          global::SystemBootStatus subBuilder = new global::SystemBootStatus();
          if (typeCase_ == TypeOneofCase.Boot) {
            subBuilder.MergeFrom(Boot);
          }
          input.ReadMessage(subBuilder);
          Boot = subBuilder;
          break;
        }
        case 42: {
          global::TombStoneStatus subBuilder = new global::TombStoneStatus();
          if (typeCase_ == TypeOneofCase.Tomb) {
            subBuilder.MergeFrom(Tomb);
          }
          input.ReadMessage(subBuilder);
          Tomb = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
