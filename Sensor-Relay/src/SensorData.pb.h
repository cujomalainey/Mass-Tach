/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Sat Dec 31 20:37:06 2016. */

#ifndef PB_SENSORDATA_PB_H_INCLUDED
#define PB_SENSORDATA_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ChannelConfig_SensorType {
    ChannelConfig_SensorType_BIKE_CADENCE = 0,
    ChannelConfig_SensorType_BIKE_SPEED = 1,
    ChannelConfig_SensorType_HR_MONITOR = 2
} ChannelConfig_SensorType;
#define _ChannelConfig_SensorType_MIN ChannelConfig_SensorType_BIKE_CADENCE
#define _ChannelConfig_SensorType_MAX ChannelConfig_SensorType_HR_MONITOR
#define _ChannelConfig_SensorType_ARRAYSIZE ((ChannelConfig_SensorType)(ChannelConfig_SensorType_HR_MONITOR+1))

typedef enum _SensorData_ConnnectionState {
    SensorData_ConnnectionState_DISCONNECTED = 0,
    SensorData_ConnnectionState_CONNECTED = 1
} SensorData_ConnnectionState;
#define _SensorData_ConnnectionState_MIN SensorData_ConnnectionState_DISCONNECTED
#define _SensorData_ConnnectionState_MAX SensorData_ConnnectionState_CONNECTED
#define _SensorData_ConnnectionState_ARRAYSIZE ((SensorData_ConnnectionState)(SensorData_ConnnectionState_CONNECTED+1))

/* Struct definitions */
typedef struct _ChannelConfig {
    pb_size_t channel_serial_number_count;
    int32_t channel_serial_number[15];
    pb_size_t channel_type_count;
    ChannelConfig_SensorType channel_type[15];
/* @@protoc_insertion_point(struct:ChannelConfig) */
} ChannelConfig;

typedef struct _SensorData {
    pb_size_t channel_counts_count;
    int32_t channel_counts[15];
    pb_size_t channel_state_count;
    SensorData_ConnnectionState channel_state[15];
/* @@protoc_insertion_point(struct:SensorData) */
} SensorData;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ChannelConfig_init_default               {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {(ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0}}
#define SensorData_init_default                  {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {(SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0}}
#define ChannelConfig_init_zero                  {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {(ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0, (ChannelConfig_SensorType)0}}
#define SensorData_init_zero                     {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {(SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0, (SensorData_ConnnectionState)0}}

/* Field tags (for use in manual encoding/decoding) */
#define ChannelConfig_channel_serial_number_tag  1
#define ChannelConfig_channel_type_tag           2
#define SensorData_channel_counts_tag            1
#define SensorData_channel_state_tag             2

/* Struct field encoding specification for nanopb */
extern const pb_field_t ChannelConfig_fields[3];
extern const pb_field_t SensorData_fields[3];

/* Maximum encoded size of messages (where known) */
#define ChannelConfig_size                       195
#define SensorData_size                          195

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SENSORDATA_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
